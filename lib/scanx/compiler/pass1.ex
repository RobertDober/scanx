defmodule Scanx.Compiler.Pass1 do

  use Scanx.Types

  import Scanx.Compiler.ActionCompiler, only: [compute_action: 1, compute_empty_action: 1, compute_rest_action: 1]

  @moduledoc """
  Pass 1 transforms the triples generated by the macros `anything`, `empty` and `on` to
  quadruples suitable for code generation.

      iex(0)> triples = [{:start, nil, %Action{emit: :blank, state: :halt}}]
      ...(0)> Pass1.transform(triples)
      [{:start, nil, :halt, {:emit_return, nil, :blank}}]
  """


  @doc false
  @spec transform(transitions()) :: intermediates()
  def transform(triples), do: _transform(triples, [])

  @doc false
  @spec _transform(transitions(), intermediates()) :: intermediates()
  defp _transform(triple, result)
  defp _transform([], result), do: result
  defp _transform([triple|rest], result), do: _transform(rest, [_transform_triple(triple)|result])


  @spec _transform_triple( transition() ) :: intermediate()
  defp _transform_triple(triple)
  defp _transform_triple({current_state, nil, actions}), do: {current_state, nil, compute_empty_action(actions)}
  defp _transform_triple({current_state, :rest, actions}), do: {current_state, :rest, compute_rest_action(actions)}
  defp _transform_triple({current_state, grapheme, actions}), do: {current_state, grapheme, compute_action(actions)}
  

end
